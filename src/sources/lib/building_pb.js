// source: building.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var summary_pb = require('./summary_pb.js');
goog.object.extend(proto, summary_pb);
var zoning_lot_pb = require('./zoning_lot_pb.js');
goog.object.extend(proto, zoning_lot_pb);
var zoning_common_pb = require('./zoning_common_pb.js');
goog.object.extend(proto, zoning_common_pb);
goog.exportSymbol('proto.BuildingEnvelope', null, global);
goog.exportSymbol('proto.BuildingFace', null, global);
goog.exportSymbol('proto.BuildingFace.BuildingFaceType', null, global);
goog.exportSymbol('proto.BuildingStorey', null, global);
goog.exportSymbol('proto.MakeBuildingRequest', null, global);
goog.exportSymbol('proto.ProposedBuilding', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ProposedBuilding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ProposedBuilding.repeatedFields_, null);
};
goog.inherits(proto.ProposedBuilding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ProposedBuilding.displayName = 'proto.ProposedBuilding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildingEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BuildingEnvelope.repeatedFields_, null);
};
goog.inherits(proto.BuildingEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildingEnvelope.displayName = 'proto.BuildingEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildingStorey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildingStorey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildingStorey.displayName = 'proto.BuildingStorey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildingFace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildingFace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildingFace.displayName = 'proto.BuildingFace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MakeBuildingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MakeBuildingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MakeBuildingRequest.displayName = 'proto.MakeBuildingRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ProposedBuilding.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ProposedBuilding.prototype.toObject = function(opt_includeInstance) {
  return proto.ProposedBuilding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ProposedBuilding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProposedBuilding.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    envelope: (f = msg.getEnvelope()) && proto.BuildingEnvelope.toObject(includeInstance, f),
    floorsList: jspb.Message.toObjectList(msg.getFloorsList(),
    proto.BuildingStorey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ProposedBuilding}
 */
proto.ProposedBuilding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ProposedBuilding;
  return proto.ProposedBuilding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ProposedBuilding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ProposedBuilding}
 */
proto.ProposedBuilding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.BuildingEnvelope;
      reader.readMessage(value,proto.BuildingEnvelope.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    case 3:
      var value = new proto.BuildingStorey;
      reader.readMessage(value,proto.BuildingStorey.deserializeBinaryFromReader);
      msg.addFloors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ProposedBuilding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ProposedBuilding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ProposedBuilding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ProposedBuilding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BuildingEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getFloorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.BuildingStorey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ProposedBuilding.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ProposedBuilding} returns this
 */
proto.ProposedBuilding.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BuildingEnvelope envelope = 2;
 * @return {?proto.BuildingEnvelope}
 */
proto.ProposedBuilding.prototype.getEnvelope = function() {
  return /** @type{?proto.BuildingEnvelope} */ (
    jspb.Message.getWrapperField(this, proto.BuildingEnvelope, 2));
};


/**
 * @param {?proto.BuildingEnvelope|undefined} value
 * @return {!proto.ProposedBuilding} returns this
*/
proto.ProposedBuilding.prototype.setEnvelope = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ProposedBuilding} returns this
 */
proto.ProposedBuilding.prototype.clearEnvelope = function() {
  return this.setEnvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ProposedBuilding.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated BuildingStorey floors = 3;
 * @return {!Array<!proto.BuildingStorey>}
 */
proto.ProposedBuilding.prototype.getFloorsList = function() {
  return /** @type{!Array<!proto.BuildingStorey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BuildingStorey, 3));
};


/**
 * @param {!Array<!proto.BuildingStorey>} value
 * @return {!proto.ProposedBuilding} returns this
*/
proto.ProposedBuilding.prototype.setFloorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.BuildingStorey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BuildingStorey}
 */
proto.ProposedBuilding.prototype.addFloors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BuildingStorey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ProposedBuilding} returns this
 */
proto.ProposedBuilding.prototype.clearFloorsList = function() {
  return this.setFloorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BuildingEnvelope.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildingEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildingEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildingEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildingEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    geom: msg.getGeom_asB64(),
    envelopeFacesList: jspb.Message.toObjectList(msg.getEnvelopeFacesList(),
    proto.BuildingFace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildingEnvelope}
 */
proto.BuildingEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildingEnvelope;
  return proto.BuildingEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildingEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildingEnvelope}
 */
proto.BuildingEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeom(value);
      break;
    case 2:
      var value = new proto.BuildingFace;
      reader.readMessage(value,proto.BuildingFace.deserializeBinaryFromReader);
      msg.addEnvelopeFaces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildingEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildingEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildingEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildingEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEnvelopeFacesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.BuildingFace.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes geom = 1;
 * @return {string}
 */
proto.BuildingEnvelope.prototype.getGeom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes geom = 1;
 * This is a type-conversion wrapper around `getGeom()`
 * @return {string}
 */
proto.BuildingEnvelope.prototype.getGeom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeom()));
};


/**
 * optional bytes geom = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeom()`
 * @return {!Uint8Array}
 */
proto.BuildingEnvelope.prototype.getGeom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BuildingEnvelope} returns this
 */
proto.BuildingEnvelope.prototype.setGeom = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated BuildingFace envelope_faces = 2;
 * @return {!Array<!proto.BuildingFace>}
 */
proto.BuildingEnvelope.prototype.getEnvelopeFacesList = function() {
  return /** @type{!Array<!proto.BuildingFace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BuildingFace, 2));
};


/**
 * @param {!Array<!proto.BuildingFace>} value
 * @return {!proto.BuildingEnvelope} returns this
*/
proto.BuildingEnvelope.prototype.setEnvelopeFacesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.BuildingFace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BuildingFace}
 */
proto.BuildingEnvelope.prototype.addEnvelopeFaces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.BuildingFace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BuildingEnvelope} returns this
 */
proto.BuildingEnvelope.prototype.clearEnvelopeFacesList = function() {
  return this.setEnvelopeFacesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildingStorey.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildingStorey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildingStorey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildingStorey.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: jspb.Message.getFieldWithDefault(msg, 1, 0),
    geom: msg.getGeom_asB64(),
    use: (f = msg.getUse()) && zoning_common_pb.ZoningUse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildingStorey}
 */
proto.BuildingStorey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildingStorey;
  return proto.BuildingStorey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildingStorey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildingStorey}
 */
proto.BuildingStorey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setLevel(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeom(value);
      break;
    case 3:
      var value = new zoning_common_pb.ZoningUse;
      reader.readMessage(value,zoning_common_pb.ZoningUse.deserializeBinaryFromReader);
      msg.setUse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildingStorey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildingStorey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildingStorey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildingStorey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLevel();
  if (f !== 0) {
    writer.writeSint32(
      1,
      f
    );
  }
  f = message.getGeom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getUse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      zoning_common_pb.ZoningUse.serializeBinaryToWriter
    );
  }
};


/**
 * optional sint32 level = 1;
 * @return {number}
 */
proto.BuildingStorey.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildingStorey} returns this
 */
proto.BuildingStorey.prototype.setLevel = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes geom = 2;
 * @return {string}
 */
proto.BuildingStorey.prototype.getGeom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes geom = 2;
 * This is a type-conversion wrapper around `getGeom()`
 * @return {string}
 */
proto.BuildingStorey.prototype.getGeom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeom()));
};


/**
 * optional bytes geom = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeom()`
 * @return {!Uint8Array}
 */
proto.BuildingStorey.prototype.getGeom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.BuildingStorey} returns this
 */
proto.BuildingStorey.prototype.setGeom = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ZoningUse use = 3;
 * @return {?proto.ZoningUse}
 */
proto.BuildingStorey.prototype.getUse = function() {
  return /** @type{?proto.ZoningUse} */ (
    jspb.Message.getWrapperField(this, zoning_common_pb.ZoningUse, 3));
};


/**
 * @param {?proto.ZoningUse|undefined} value
 * @return {!proto.BuildingStorey} returns this
*/
proto.BuildingStorey.prototype.setUse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildingStorey} returns this
 */
proto.BuildingStorey.prototype.clearUse = function() {
  return this.setUse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildingStorey.prototype.hasUse = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildingFace.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildingFace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildingFace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildingFace.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildingFace}
 */
proto.BuildingFace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildingFace;
  return proto.BuildingFace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildingFace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildingFace}
 */
proto.BuildingFace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!proto.BuildingFace.BuildingFaceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildingFace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildingFace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildingFace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildingFace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.BuildingFace.BuildingFaceType = {
  UNKNOWN: 0,
  ROOF: 1,
  LOTLINE: 2,
  FRONT: 3,
  INTERIOR: 4,
  BELLY: 5
};

/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.BuildingFace.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildingFace} returns this
 */
proto.BuildingFace.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional BuildingFaceType type = 2;
 * @return {!proto.BuildingFace.BuildingFaceType}
 */
proto.BuildingFace.prototype.getType = function() {
  return /** @type {!proto.BuildingFace.BuildingFaceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.BuildingFace.BuildingFaceType} value
 * @return {!proto.BuildingFace} returns this
 */
proto.BuildingFace.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MakeBuildingRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MakeBuildingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MakeBuildingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MakeBuildingRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    zoningLot: (f = msg.getZoningLot()) && zoning_lot_pb.ZoningLot.toObject(includeInstance, f),
    massingGoals: (f = msg.getMassingGoals()) && zoning_common_pb.MassingGoals.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MakeBuildingRequest}
 */
proto.MakeBuildingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MakeBuildingRequest;
  return proto.MakeBuildingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MakeBuildingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MakeBuildingRequest}
 */
proto.MakeBuildingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new zoning_lot_pb.ZoningLot;
      reader.readMessage(value,zoning_lot_pb.ZoningLot.deserializeBinaryFromReader);
      msg.setZoningLot(value);
      break;
    case 2:
      var value = new zoning_common_pb.MassingGoals;
      reader.readMessage(value,zoning_common_pb.MassingGoals.deserializeBinaryFromReader);
      msg.setMassingGoals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MakeBuildingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MakeBuildingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MakeBuildingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MakeBuildingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZoningLot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      zoning_lot_pb.ZoningLot.serializeBinaryToWriter
    );
  }
  f = message.getMassingGoals();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      zoning_common_pb.MassingGoals.serializeBinaryToWriter
    );
  }
};


/**
 * optional ZoningLot zoning_lot = 1;
 * @return {?proto.ZoningLot}
 */
proto.MakeBuildingRequest.prototype.getZoningLot = function() {
  return /** @type{?proto.ZoningLot} */ (
    jspb.Message.getWrapperField(this, zoning_lot_pb.ZoningLot, 1));
};


/**
 * @param {?proto.ZoningLot|undefined} value
 * @return {!proto.MakeBuildingRequest} returns this
*/
proto.MakeBuildingRequest.prototype.setZoningLot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MakeBuildingRequest} returns this
 */
proto.MakeBuildingRequest.prototype.clearZoningLot = function() {
  return this.setZoningLot(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeBuildingRequest.prototype.hasZoningLot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MassingGoals massing_goals = 2;
 * @return {?proto.MassingGoals}
 */
proto.MakeBuildingRequest.prototype.getMassingGoals = function() {
  return /** @type{?proto.MassingGoals} */ (
    jspb.Message.getWrapperField(this, zoning_common_pb.MassingGoals, 2));
};


/**
 * @param {?proto.MassingGoals|undefined} value
 * @return {!proto.MakeBuildingRequest} returns this
*/
proto.MakeBuildingRequest.prototype.setMassingGoals = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MakeBuildingRequest} returns this
 */
proto.MakeBuildingRequest.prototype.clearMassingGoals = function() {
  return this.setMassingGoals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeBuildingRequest.prototype.hasMassingGoals = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
