// source: zoning_lot.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var scenario_pb = require('./scenario_pb.js');
goog.object.extend(proto, scenario_pb);
var site_pb = require('./site_pb.js');
goog.object.extend(proto, site_pb);
var zoning_common_pb = require('./zoning_common_pb.js');
goog.object.extend(proto, zoning_common_pb);
goog.exportSymbol('proto.LotLine', null, global);
goog.exportSymbol('proto.LotLine.LotLineType', null, global);
goog.exportSymbol('proto.MakeZoningLotRequest', null, global);
goog.exportSymbol('proto.ZoningEnvelope', null, global);
goog.exportSymbol('proto.ZoningLot', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZoningLot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZoningLot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZoningLot.displayName = 'proto.ZoningLot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LotLine = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LotLine, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LotLine.displayName = 'proto.LotLine';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZoningEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZoningEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZoningEnvelope.displayName = 'proto.ZoningEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MakeZoningLotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MakeZoningLotRequest.repeatedFields_, null);
};
goog.inherits(proto.MakeZoningLotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MakeZoningLotRequest.displayName = 'proto.MakeZoningLotRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZoningLot.prototype.toObject = function(opt_includeInstance) {
  return proto.ZoningLot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZoningLot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZoningLot.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geom: msg.getGeom_asB64(),
    lotLines: (f = msg.getLotLines()) && proto.LotLine.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZoningLot}
 */
proto.ZoningLot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZoningLot;
  return proto.ZoningLot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZoningLot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZoningLot}
 */
proto.ZoningLot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeom(value);
      break;
    case 3:
      var value = new proto.LotLine;
      reader.readMessage(value,proto.LotLine.deserializeBinaryFromReader);
      msg.setLotLines(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZoningLot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZoningLot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZoningLot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZoningLot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLotLines();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.LotLine.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ZoningLot.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZoningLot} returns this
 */
proto.ZoningLot.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes geom = 2;
 * @return {string}
 */
proto.ZoningLot.prototype.getGeom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes geom = 2;
 * This is a type-conversion wrapper around `getGeom()`
 * @return {string}
 */
proto.ZoningLot.prototype.getGeom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeom()));
};


/**
 * optional bytes geom = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeom()`
 * @return {!Uint8Array}
 */
proto.ZoningLot.prototype.getGeom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ZoningLot} returns this
 */
proto.ZoningLot.prototype.setGeom = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional LotLine lot_lines = 3;
 * @return {?proto.LotLine}
 */
proto.ZoningLot.prototype.getLotLines = function() {
  return /** @type{?proto.LotLine} */ (
    jspb.Message.getWrapperField(this, proto.LotLine, 3));
};


/**
 * @param {?proto.LotLine|undefined} value
 * @return {!proto.ZoningLot} returns this
*/
proto.ZoningLot.prototype.setLotLines = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ZoningLot} returns this
 */
proto.ZoningLot.prototype.clearLotLines = function() {
  return this.setLotLines(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ZoningLot.prototype.hasLotLines = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LotLine.prototype.toObject = function(opt_includeInstance) {
  return proto.LotLine.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LotLine} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LotLine.toObject = function(includeInstance, msg) {
  var f, obj = {
    index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LotLine}
 */
proto.LotLine.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LotLine;
  return proto.LotLine.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LotLine} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LotLine}
 */
proto.LotLine.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 2:
      var value = /** @type {!proto.LotLine.LotLineType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LotLine.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LotLine.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LotLine} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LotLine.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.LotLine.LotLineType = {
  UNKNOWN: 0,
  FRONT: 1,
  SIDE: 2,
  REAR: 3
};

/**
 * optional int32 index = 1;
 * @return {number}
 */
proto.LotLine.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.LotLine} returns this
 */
proto.LotLine.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional LotLineType type = 2;
 * @return {!proto.LotLine.LotLineType}
 */
proto.LotLine.prototype.getType = function() {
  return /** @type {!proto.LotLine.LotLineType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.LotLine.LotLineType} value
 * @return {!proto.LotLine} returns this
 */
proto.LotLine.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZoningEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.ZoningEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZoningEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZoningEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    geom: msg.getGeom_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZoningEnvelope}
 */
proto.ZoningEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZoningEnvelope;
  return proto.ZoningEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZoningEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZoningEnvelope}
 */
proto.ZoningEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGeom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZoningEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZoningEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZoningEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZoningEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGeom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes geom = 1;
 * @return {string}
 */
proto.ZoningEnvelope.prototype.getGeom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes geom = 1;
 * This is a type-conversion wrapper around `getGeom()`
 * @return {string}
 */
proto.ZoningEnvelope.prototype.getGeom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGeom()));
};


/**
 * optional bytes geom = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGeom()`
 * @return {!Uint8Array}
 */
proto.ZoningEnvelope.prototype.getGeom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGeom()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ZoningEnvelope} returns this
 */
proto.ZoningEnvelope.prototype.setGeom = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MakeZoningLotRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MakeZoningLotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MakeZoningLotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MakeZoningLotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MakeZoningLotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scenario: (f = msg.getScenario()) && scenario_pb.Scenario.toObject(includeInstance, f),
    site: (f = msg.getSite()) && site_pb.Site.toObject(includeInstance, f),
    zonesList: jspb.Message.toObjectList(msg.getZonesList(),
    zoning_common_pb.Zone.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MakeZoningLotRequest}
 */
proto.MakeZoningLotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MakeZoningLotRequest;
  return proto.MakeZoningLotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MakeZoningLotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MakeZoningLotRequest}
 */
proto.MakeZoningLotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new scenario_pb.Scenario;
      reader.readMessage(value,scenario_pb.Scenario.deserializeBinaryFromReader);
      msg.setScenario(value);
      break;
    case 2:
      var value = new site_pb.Site;
      reader.readMessage(value,site_pb.Site.deserializeBinaryFromReader);
      msg.setSite(value);
      break;
    case 3:
      var value = new zoning_common_pb.Zone;
      reader.readMessage(value,zoning_common_pb.Zone.deserializeBinaryFromReader);
      msg.addZones(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MakeZoningLotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MakeZoningLotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MakeZoningLotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MakeZoningLotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScenario();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      scenario_pb.Scenario.serializeBinaryToWriter
    );
  }
  f = message.getSite();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      site_pb.Site.serializeBinaryToWriter
    );
  }
  f = message.getZonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      zoning_common_pb.Zone.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scenario scenario = 1;
 * @return {?proto.Scenario}
 */
proto.MakeZoningLotRequest.prototype.getScenario = function() {
  return /** @type{?proto.Scenario} */ (
    jspb.Message.getWrapperField(this, scenario_pb.Scenario, 1));
};


/**
 * @param {?proto.Scenario|undefined} value
 * @return {!proto.MakeZoningLotRequest} returns this
*/
proto.MakeZoningLotRequest.prototype.setScenario = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MakeZoningLotRequest} returns this
 */
proto.MakeZoningLotRequest.prototype.clearScenario = function() {
  return this.setScenario(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeZoningLotRequest.prototype.hasScenario = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Site site = 2;
 * @return {?proto.Site}
 */
proto.MakeZoningLotRequest.prototype.getSite = function() {
  return /** @type{?proto.Site} */ (
    jspb.Message.getWrapperField(this, site_pb.Site, 2));
};


/**
 * @param {?proto.Site|undefined} value
 * @return {!proto.MakeZoningLotRequest} returns this
*/
proto.MakeZoningLotRequest.prototype.setSite = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MakeZoningLotRequest} returns this
 */
proto.MakeZoningLotRequest.prototype.clearSite = function() {
  return this.setSite(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MakeZoningLotRequest.prototype.hasSite = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Zone zones = 3;
 * @return {!Array<!proto.Zone>}
 */
proto.MakeZoningLotRequest.prototype.getZonesList = function() {
  return /** @type{!Array<!proto.Zone>} */ (
    jspb.Message.getRepeatedWrapperField(this, zoning_common_pb.Zone, 3));
};


/**
 * @param {!Array<!proto.Zone>} value
 * @return {!proto.MakeZoningLotRequest} returns this
*/
proto.MakeZoningLotRequest.prototype.setZonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Zone=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Zone}
 */
proto.MakeZoningLotRequest.prototype.addZones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Zone, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.MakeZoningLotRequest} returns this
 */
proto.MakeZoningLotRequest.prototype.clearZonesList = function() {
  return this.setZonesList([]);
};


goog.object.extend(exports, proto);
